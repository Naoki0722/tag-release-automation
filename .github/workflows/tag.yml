name: Create Release

on:
  pull_request:
    branches:
      - release/prd
    types: [closed]

jobs:
  create_release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch all tags and complete history
        run: |
          git fetch --prune --unshallow --tags
          if [ $? -ne 0 ]; then
            echo "Failed to fetch tags and history"
            exit 1
          fi

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [ -z "$latest_tag" ]; then
            echo "No tags found"
            exit 1
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Determine new version
        id: new_version
        run: |
          latest_tag=${{ env.latest_tag }}
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          pr_title="${{ github.event.pull_request.title }}"
          case "$pr_title" in
            *major*)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            *minor*)
              minor=$((minor + 1))
              patch=0
              ;;
            *)
              patch=$((patch + 1))
              ;;
          esac
          new_version="v$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Create GitHub Tag
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -a ${{ env.new_version }} -m "Release ${{ env.new_version }}"
          git push --tags
          if [ $? -ne 0 ]; then
            echo "Failed to push tag"
            exit 1
          fi

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ env.new_version }}
          name: ${{ env.new_version }}
          generateReleaseNotes: true
          prerelease: false
